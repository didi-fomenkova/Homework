// Анализ массива с накопителем.

#include <iostream>

void task9209();
void task9317();
void task9811();
void task2914();
void task14786();
void task14711();
void task2921();
void task5289();
void task14786Second();


using namespace std;

int main() {

	task14786Second();


	return 0;
}

// Дан массив, содержащий неотрицательные целые числа. 
// Если сумма всех элементов массива чётная, нужно вывести количество чётных (по значению) элементов массива, если нечётная – количество нечётных.

void task9209() {
	int const N = 2000;
	int a[N];
	int i, k;
	for (i = 0; i < N; i++)
		cin >> a[i];

	k = 0;
	for (i = 0; i < N; i++)
		if ((a[i] % 2 == 0)) {
			k++;
		}
	if ((k % 2) == 1) {
		cout << "Quantity even numbers " << k;
	}
	else {
		k = N - k;
		cout << "Quantity odd numbers " << k;
	}
}

// Дан массив, содержащий неотрицательные целые числа.
// Если сумма всех элементов массива чётная, нужно вывести количество нечётных (по значению) элементов массива, если нечётная – количество чётных.

void task9317() {
	int const N = 2000;
	int a[N];
	int i, k;
	for (i = 0; i < N; i++)
		cin >> a[i];
	k = 0;
	for (i = 0; i < N; i++)
		if ((a[i] % 2) == 1) {
			k++;
		}
	if ((k % 2) == 0) {
		cout << "Quantity odd numbers " << k;
	}
	else {
		k = N - k;
		cout << "Quantity even numbers " << k;
	}
}

// Дан массив, содержащий 2015 неотрицательных целых чисел. Ямой называется не крайний элемент массива, который меньше обоих своих соседей.
// Необходимо найти в массиве самую глубокую яму, то есть яму, значение которой минимально. Если в массиве нет ни одной ямы, ответ считается равным 0.

void task9811() {
	int const N = 2015;
	int a[N];
	int i, k;
	for (i = 0; i < N; i++)
		cin >> a[i];
	k = -1;
	for (i = 1; i < N - 1; i++) {
		if ((a[i] < a[i - 1]) && (a[i] < a[i + 1]) && ((a[i] < k) || (k == -1))) {
			k = a[i];
		}
	}
	if (k == - 1) {
		cout << "No";
	}
	else {
		cout << "Pit is " << k;
	}
}

// Опишите на русском языке или на одном из языков программирования алгоритм вычисления разности между
// средним арифметическим максимального и минимального значений элементов заданного целочисленного массива из 30 элементов
// и средним арифметическим всех элементов этого массива.

void task2914() {
	int const N = 30;
	int a[N];
	int min, max, i, sum;
	float sred1, sred2;
	for (i = 0; i < N; i++)
		cin >> a[i];
	min = a[0];
	max = a[0];
	sum = 0;
	sred1 = 0;
	sred2 = 0;
	for (i = 1; i < N; i++) {
		if (a[i] < min) {
			min = a[i];
		}
		if (a[i] > max) {
			max = a[i];
		}
		sum += a[i];
	}
	sred1 = (float) (min + max) / 2;
	sred2 = (float) sum / N;
	sred1 -= sred2;
	cout << "Difference is " << sred1;
}

// Дан целочисленный массив из 30 элементов. Элементы массива могут принимать целые значения от 0 до 10 000 включительно.
// Опишите на одном из языков программирования алгоритм, который находит сумму элементов массива, меньших 200 и при этом кратных 5,
// а затем заменяет каждый такой элемент на число, равное найденной сумме. Гарантируется, что хотя бы один такой элемент в массиве есть.
// В качестве результата необходимо вывести изменённый массив, каждый элемент выводится с новой строчки.

void task15865() {
	int const n = 6;
	int a[n];
	int i, j, k;
	for (i = 0; i < n; i++)
		cin >> a[i];
	j = 0;
	for (i = 0; i < n; ++i) {
		if ((a[i] < 200) && ((a[i] % 5) == 0)) {
			j += a[i];
		}
	}
	for (i = 0; i < n; ++i) {
		if ((a[i] < 200) && ((a[i] % 5) == 0)) {
			a[i] = j;
		}
		cout << a[i] << endl;
	}

}
		

// Дан массив, содержащий 2018 положительных целых чисел, не превышающих 30 000.
// Необходимо определить, сколько в этом массиве элементов, десятичная и шестнадцатеричная запись которых содержит одинаковое количество цифр.

void task14786() {
	int const N = 2018;
	int a[N];
	int  i, k;
	for (i = 0; i < N; ++i)
		cin >> a[i];
	k = 0;
	for (i = 0; i < N; ++i)
		if (((a[i] <= 0) && (a[i] <= 9)) ||
			((a[i] <= 16) && (a[i] <= 99)) ||
			((a[i] <= 256) && (a[i] <= 999)) ||
			((a[i] <= 4096) && (a[i] <= 9999))) {
			k++;
		}
	cout << "Quantity  numbers " << k;
}

// Дан массив, содержащий 2018 положительных целых чисел, не превышающих 30 000.
// Необходимо определить, сколько в этом массиве элементов, десятичная и шестнадцатеричная запись которых содержит одинаковое количество цифр.
void task14786Second() {
	int const N = 8;
	int a[N];
	int b, i, k, l, m;
	for (i = 0; i < N; ++i)
		cin >> a[i];
	b = 0;
	for (i = 0; i < N; ++i) {
		l = a[i];
		m = 0;
		k = 0;
		while (l != 0) {
			l = l / 16;
			m++;
		}
		l = a[i];
		while (l != 0) {
			l = l / 10;
			k++;
		}
		if (m == k) {
			b++;
		}
	}
	cout << b << endl;
}

// Дан массив, содержащий 2018 положительных целых чисел, не превышающих 30 000.
//Необходимо определить, сколько в этом массиве элементов, десятичная и восьмеричная запись которых содержит одинаковое количество цифр.

void task14711() {
	int const N = 2018;
	int a[N];
	int  i, k;
	for (i = 0; i < N; ++i)
		cin >> a[i];
	k = 0;
	for (i = 0; i < N; ++i)
		if (((a[i] <= 1) && (a[i] <= 7)) ||
			((a[i] <= 10) && (a[i] <= 63)) ||
			((a[i] <= 100) && (a[i] <= 511)) ||
			((a[i] <= 1000) && (a[i] <= 4095)) ||
			(a[i] <= 10000)) {
			k++;
		}
	cout << "Quantity  numbers " << k;
}

// Дан целочисленный массив из 30 элементов. Элементы массива могут принимать значения от 0 до 1000.
// Опишите алгоритм, который позволяет подсчитать и вывести среднее арифметическое элементов массива, имеющих нечетное значение.

void task2921() {
	int const N = 7;
	int a[N];
	int i, x;
	float s;
	for (i = 0; i < N; i++)
		cin >> a[i];
	x = 0;
	s = 0;
	for (i = 0; i < N; i++) 
		if ((a[i] % 2) == 1) {
			x++;
			s += a[i];
		}
	s = (float) s / x;
	cout << "Amount is " << s;
}

// Дан целочисленный массив из 30 элементов.Элементы массива могут принимать целые значения от 0 до 1000.
// Элемент массива называется хорошим, если это двузначное число, причём цифра в разряде десятков больше,
// чем цифра в разряде единиц.Опишите на одном из языков программирования алгоритм, позволяющий найти и 
//вывести сумму всех хороших элементов массива.

void task5289() {
	int const N = 5;
	int a[N];
	int i, s;
	for (i = 0; i < N; i++)
		cin >> a[i];
	s = 0;
	for (i = 0; i < N; i++)
		if (((a[i] < 100) && (a[i] > 9)) && ((a[i] / 10)  > (a[i] % 10))) {
			s += a[i];
		}
	cout << "Amount is " << s << endl;
}
	